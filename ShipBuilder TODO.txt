- Background texture:
	- SetBackgroundTexture(rgbaImage)
		- Quad is full screen wide, but height depends on texture's aspect ratio
	- New texture unit
	- Texture is set to tiled
	- ViewModel::CalculateBackgroundOrthoMatrix(texture dimensions)
		- Recalc'd and given to shader at canvas size change, but not at zoom and at cam
	- New shader


- Click-And-Draw usecase:
	- Pencil tool (*)

- Materials palette:
	- Material descriptions
		- json + Material class
		- Text area underneath property grid
			- Methods: "SetMaterialProperties" instead of "SetMaterialPropertyGrid"			

- MainFrame TODO's:
	- Bug: resizing frame does not resize left column vertically accordingly
	- Toolbar:
		- Untoggle other buttons when one tool is toggled (i.e. radio behavior)
			- @ ReconciliateUIWithSelectedTool
				- Need array of ALL buttons (ToolType) - assuming structural tool enum values are separate from electrical
	- App icons (whole "Resources" folder)


================================================================================================================================================================================

- Gist:
	- Code organization:
		- ShipBuilderLib project, slave of FloatingSandbox project
		- ShipBuilder project, top-level project for standalone SB UI
			- For testing ShipBuilder alone
			- Just MainApp basically
		- All in separate ShipBuilder namespace
	- Own frame for UI
	- Model, View, Controller architecture
	- Reuses existing ResourceHelper, only need (at this moment) for separate resource directory and method is Shaders ("Game" and "ShipBuilder")
	- On the "structure: pixels vs triangles", Wreno says fine to edit in pixel mode, and allow user to eventually _view_ also in triangle mode (but not necessarily edit)
	- On the size: Wreno says "no fixed sized, allow whole world"

- Architecture:

	- MainFrame: IUserInterface
	  |------------------------------>View
	  |-------> Controller/Tools		    
		    |---->ModelController
			  |---->Model
			  |------------------------>View

	- MainFrame: owns toolboxes, etc.
		- Owns Controller and View
		- Very thin, calls into Controller for each high-level interaction (e.g. SelectTool(.), OnWorkbenchStateChanged(.))
		- Implements IUserInterface with interface required by controller, e.g. UI state changes, mouse capture, undo stack visualization
		- Owns WorkbenchState
			- Candidate for saved settings
			- Contains foreground and background materials, and settings for all tools
	- Controller
		- Owns ModelController, takes reference to View
		- Main Frame calls into Controller for each user interaction, including button clicks
			- Controller->Main Frame callbacks via IUserInterface
		- Maintains UI state (e.g. grid toggle, visible layers), instructing View
		- Maintains interaction state, implemented via Tools
		- Owns SelectionManager pseudo-tool
		- Owns ClipboardManager pseudo-tool
	- ModelController
		- Owns Model, takes reference to View
		- Implements all interactions and algorithms (e.g. pencil, line, flood, paste, etc.) and uploads resulting changes from Model into View
		- Implements ship load/save logic, populating/reading Model
		- Maintains Undo stack, and orchestrates undo stack visualization with IUserInterface
	- Model
		- All data, (almost) no operations (anemic), fully exported
		- Modified by ModelController
		- Knows nothing about view
		- IsDirty flag
	- View
		- Rendering of ship, all layers
		- Rendering of tool interactions (e.g. marching ants, squares, etc.)
		- Fully OpenGL
	- Tools
		- Implement state machines for interactions, including visual notifications (marching ants, paste mask, etc.)
		- Take references to WorkbenchState and SelectionManager (at tool initialization time)
			- SelectionManager so that Selection tool can save selection to it
		- Receive input state events from Controller, and notifications of WorkbenchState changed
		- Take references to View and ModelController
		- Modify Model via ModelController
		- Instruct View for tool interactions, e.g. tool visualizations (lines, paste mask, etc.)
		- Have also reference to IUserInterface, e.g. to capture/release mouse, visualize Undo stack

----------------------------------------------------------------------------------------------------------

- Workflows:
	- Create New Ship (@menu, @file panel)
		- GameController::CreateNew()
	- Create New Ship From TExture (@menu, @file panel)
		- GameController::CreateNewFromTexture()
	- Load Ship (@menu, @file panel)
		- GameController::Load()

- UI Controls:
	+ Button to save and go back to game (!StandaloneMode)
	+ Button to quit and go back to game (!StandaloneMode)
	- Button to Save (acts also as SaveAs for first save; menu however has also separate SaveAs)
	- Undo stack
	- Error (message) notification(s)
	+ Add electrical/texture/ropes layer
	- Button to open ShipMetadata dialog
	- Resize button (canvas resize)


- StatusBar:
	- Own class
	- Areas:
		- Canvas:
			- Coords and icon
			- Selection size and icon
			- WorkSpace size and icon
			- Material under cursor (for ?)
		- Ship: (i.e. ship measurements) 
			- Need UnitsSystem in Preferences
			- Coords and icon
			- Ship size and icon

- Tools:
	! Most tools should pan when the (captured) mouse is outside of the canvas
		- IUserInterface::OnViewCameraChanged()
	- BaseTool:
		- Stores all protected references passed from cctors: IUserInterface, ModelController, View, SelectionManager
		- Abstract methods from game - but all pure
	- All tools:
		- Pencil
			- Settings: Size
		- Eraser
			- Settings: Size
		- Flood
		- Selection
			- Implements selection interaction and rendering of visual feedback *during the interaction only*
			- Takes SelectionManager ref (like all tools, part of the ITool interface), and populates it upon confirmation of selection made
		- Sample
		- Line
		- Rectangle
			- Settings: FillWithFore|FillWithBack|NoFill; Size
		- Ellipses
		- Mass changer
	- SelectionManager pseudo-tool:
		- Maintains current selection
		- Not really a tool but a pseudo-tool
		- Takes View so that it can instruct it to render marching ants
			- Is not responsible for drawing of temporary selection while the user is making it, that is the Selection tool
		- Read by ClipboardManager pseudo-tool to make clip
	- ClipboardManager pseudo-tool:
		- Maintains clip
		- Implements operations: Copy, Cut, Paste
			- TODO: who should be responsible for the interactions during Paste? See Photoshop and Paint
		- Talks with IUserInterface to enable/disable menus

- RenderContext:
	- Single-threaded
	- Initializes on same canvas that main frame initializes on
		- So needs to be passed to SB::MainFrame's cctor
		- TODO: after or before? Better before for less chance of side effects?
			- Ideally other context is removed before new one is set
			- See if can move global GameOpenGL initialization outside of Game RenderContext and into ::MainFrame initialization, before both
	- Renders synchronously, on-demand via SB::MainFrame::OnPaint()
		- Except when we need animated tools, e.g. ants walking: for these we set a timer (in the order of 100's of ms) during the duration
		  of the tool
			- via an IUserInterface method, and another call to stop it ("SetAutoRender(bool)")
	+ ViewModel:
		+ Terminology:
			+ WorkSpace: has the pixel size of the structure (equivalent of ::World)
			+ WorkSpaceCoordinates (type @ ShipBuilderTypes)
			+ DisplayLogical: has the logical display (window) size (equivalent of ::Logical)
			+ DisplayLogicalCoordinates: the logical display coordinates (type @ ShipBuilderTypes)
			+ DisplayPixel: has the pixel display (window) size (equivalent of ::Pixel)
			+ DisplayPixelCoordinates: the pixel display coordinates (type @ ShipBuilderTypes)
		+ World coords is model pixel coords, i.e. WorkSpace
		+ Tells outside world of pan extent (for scrollbar width setting)


- WorkbenchState
	+ Independent from model - exclusively tools-related settings
		+ So no need to reset/change/update at new model creation
	= cctor: (MaterialsDB, SB::PreferencesManager)
		+ FW and BG materials: always "defaults" from MaterialsDB
		- other settings: loaded from SB::PreferencesManager

- Ship file format:
	- Min FS version (.shp, .shp2)
		- Ideally it should be a "set" of versions, including the Materials' DB versions which live in the json so to be easily editable manually
	- "File lock" which disallows editing
		- Password from user; salted -> Hash in file
		- Verify hash matches when editing
	- Also includes sounds
		- Extract from other "TODO" .txt file

- Misc:
	- Localization:
		- See if can do separate extraction into separate file, which then is loaded at all times by LocalizationManager together with the other one 
	- Ruler: pick a scale (pixels to meter of original ship), then you choose how long the ruler
		- L shaped: horizontal and vertical
		- Ruler sticks to the canvas
		- Only one ruler at a time
	- Texture Generator for ship canvas:
		- Makes larger image, with bilinear interpolation with alpha blending
			- Ain't that what we've got already for the auto-texturizer?
	- Selectable backgrounds		
	- See if it takes so long to initialize SB::MainFrame that we need IProgress
		- Preferences:
			- New ship size
			- ...all tools' settings...
			- TODO: spec
		- Inherits FullScreen state and shares state changes (so, for example, if exits full screen in ShipBuilder, also Game has exited full screen)
			- How to share state changes? 
				- FullScreenManager class, shared_ptr in both
				- Looked at at each Game<->ShipBuilder switch by receiver
	- TO-SPEC:
		- What to do with background music when switching back and forth?

