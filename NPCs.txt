NPC Physics
===========

An NPC is represented by a single particle, exactly like all the other particles in FS. The way the NPC particles move depends on the "regime" or "state" in which an NPC finds itself at the moment. There are two possible "regimes".

Constrained Regime
This is the initial regime, when the NPC is spawn. In this regime the NPC particle is constrained to move along the springs of the ship, and the particle's movement is the resultant of the NPC walk along the springs (governed by a separate algorithm that also considers zones and NPC types) and of gravity. As an example, when walking on an almost-flat horizontal spring, gravity has little effect and the NPC moves freely. As soon as the spring becomes too steep, however, gravity wins and the NPC "slides" down the spring.

In the Constrained Regime NPC's normally walk along the springs of the "Paths" layer, i.e. springs of the ship that are also present in the Paths layer. These springs make up the paths that NPC's walk along. However, NPCs may eventually lose their path, for example when at the end of a path or when the path becomes too steep. When this happens, they fall along the ship springs according to gravity, until they reach a path spring again.

An NPC remains in the constrained regime until it reaches a "hole" point, i.e. a point through which normally water would enter. When this happens, the NPC enters the "Free" regime.

Free Regime
In this regime NPC's do not follow paths, but rather move freely according to particle physics. They fall when in air or sink, rise, and float when in water. Once in this regime, the NPC stays in this regime.

This regime has a few sub-states controlling the actions and the rendering of the NPC, and a separate algorithm governs the transitions between these states. The states are:
- Floating: the NPC particle is stationary on the sea surface; the NPC might be rendered as asking for help with its arms and moving its legs to stay afloat.
- Sinking: the NPC particle is sinking towards the bottom of the sea; the NPC might be rendered as rotating with limbs moving in arbitrary directions.
- Rising: the NPC particle is underwater but rising towards the sea surface; the NPC might be rendered as swimming upwards.

NPC particles will all be made of the same "NPC" material, which simulates human mass and buoyancy when breathing, resulting in a particle that would normally *barely* float. If arbitrary transitions between the three states are required - e.g. a floating NPC should start sinking all of a sudden - these will be implemented by means of forces added onto the particles.

NPC Rendering
===========

We have three options for the rendering of NPCs:
1) Prepared textures with all the frames necessary for movements
2) Prepared frames with vertices of limbs for each in-between frame, which then get interpolated
3) Fully physical stick-men


Details
===========

- "Walkability"
	- A particle is either "walkable" or not
	- A spring is "walkable" only if both endpoints are "walkable"
		- "Walkabaility" of springs is maintained at destroy and repair
	- A specific "Paths" (or "FloorPlan") layer provides a bitmask indicating which particles are walkable and which are not
		- When the layer is absent, the bitmask is created automatically with the hullness of particles
- State machine(s):
	- Constrained regime:
		- Freefall state:
			! In this state an NPC is falling down a non-walkable spring
			- Do hole check to check for transition to Free regime
			- When mid-spring: slide along spring in the direction that is most aligned with gravity
			- When the NPC reaches an endpoint of the spring:
				- If the point is non-walkable:
					- Choose the next spring (by definition: non-walkable): 
						- The one most aligned with gravity
					- Keep falling (stay in this state)
				- Else (the point is walkable):
					- Transition to Landed state
		- Landed state:
			! Temporary state, exists for animation
			- Do hole check to check for transition to Free regime
			- From here, after some time: choose a walking direction: "left" or "right", then transition to Walking_MakeNextChoice
				- TODO: see below if we actually can find next spring without having an incoming spring
		- Walking:
			! When an NPC is walking, it follows a predefined direction, either "left" or "right"
			- Do hole check to check for transition to Free regime
			- When mid-spring:
				- Calculate velocity:
					- TODO: resultant of constant WalkingVelocity in the direction of the walk with gravity (projected along spring) + friction
				- Move by velocity
			- When the NPC reaches an endpoint of the walkable spring: transition to Walking_MakeNextChoice state
		- Walking_MakeNextChoice:
			- Do hole check to check for transition to Free regime
			- Choose the next spring:
				! Could be the same as the incoming in case we're sliding
				- The first non-deleted walkable spring (first in CW direction if going R, else CCW if going L, from the incoming spring)
					- TODO: see if can do without having to remember incoming spring: redefine how we choose next spring knowing only the wanted direction
				- If it is in the walking direction, and if it is not too steep
					- Steepness check uses friction of walkabaility
			- If a choice can't be made: invert direction
				- Stay in this state so we still need to make a choice

	- Free regime:
		-
