vec4 CalculateOceanPlaneColor(vec4 baseColor, float yNdc, float yBackNdc, float yMidNdc, float yFrontNdc)
{
    //
    // Calculate border width, taking into account steep vertical edges
    //

    #define DERIV_MULT 10.
    
    float basalBorderWidth = 0.003; // Independent from resolution

#ifdef RENDER_ALL_PLANES
    float backDeriv = dFdx(yBackNdc);
    float borderWidthHalfBack = basalBorderWidth + DERIV_MULT * backDeriv * backDeriv;
    float midDeriv = dFdx(yMidNdc);
    float borderWidthHalfMid = basalBorderWidth + DERIV_MULT * midDeriv * midDeriv;
#endif

    float frontDeriv = dFdx(yFrontNdc);
    float borderWidthHalfFront = basalBorderWidth + DERIV_MULT * frontDeriv * frontDeriv;
    

    //
    // Color
    //

    // 1 when yNdc is below middle of the border, 0 otherwise

#ifdef RENDER_ALL_PLANES
    float baseColorBack = step(yNdc, yBackNdc - borderWidthHalfBack);
    float baseColorMid = step(yNdc, yMidNdc - borderWidthHalfMid);
#endif

    float baseColorFront = step(yNdc, yFrontNdc - borderWidthHalfFront);

#ifdef RENDER_ALL_PLANES
    float baseColorAlpha =
        max(
            1. * baseColorFront,
            max(
                .6 * baseColorMid,
                .5 * baseColorBack));
#else
    float baseColorAlpha = 1. * baseColorFront;
#endif

    //return vec4(baseColor, baseColorAlpha);

    //
    // Border
    //

#ifdef RENDER_ALL_PLANES
    float borderBack =
        1. - smoothstep(0., borderWidthHalfBack, abs(yNdc - (yBackNdc - borderWidthHalfBack)));

    float borderMid =
        1. - smoothstep(0., borderWidthHalfMid, abs(yNdc - (yMidNdc - borderWidthHalfMid)));
#endif

    float borderFront =
        1. - smoothstep(0., borderWidthHalfFront, abs(yNdc - (yFrontNdc - borderWidthHalfFront)));

#ifdef RENDER_ALL_PLANES
    // epsilon when front is visible, 1 otherwise
    #define FrontObscuredAlpha 0.4
    float borderFrontOpaqueness = (1. - baseColorFront) * (1. - FrontObscuredAlpha) + FrontObscuredAlpha;

    // epsilon when mid is visible, 1 otherwise
    #define MidObscuredAlpha 0.4
    float borderMidOpaqueness = (1. - baseColorMid) * (1. - MidObscuredAlpha) + MidObscuredAlpha;
#endif

#ifdef RENDER_ALL_PLANES
    float borderAlpha =
        max(
            1. * borderFront,
            max(
                .9 * borderMid * borderFrontOpaqueness,
                .7 * borderBack * borderFrontOpaqueness * borderMidOpaqueness));
#else
    float borderAlpha = 1. * borderFront;
#endif

    //return vec4(1., 1., 1., borderAlpha);

    // Combine

    vec4 finalColor = mix(
        vec4(baseColor.xyz, baseColorAlpha * baseColor.w),
        vec4(1.), // Border color
        borderAlpha);

    //return finalColor * .5 + vec4(vec3(frontDeriv), 1.) * .5;
    return finalColor;
}
