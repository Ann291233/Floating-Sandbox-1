###VERTEX-120

#define in attribute
#define out varying

// Inputs
in vec4 inShipPointAttributeGroup1; // Position, TextureCoordinates
in vec4 inShipPointAttributeGroup2; // Light, Water, PlaneId, Decay
#ifdef WITH_TEMPERATURE
in float inShipPointTemperature; // Temperature
#endif
#ifdef WITH_MATTE_COLOR
in vec4 inShipPointColor;
#endif

// Outputs        
out vec3 vertexAttributes; // Light, Water, Decay
#ifndef WITH_MATTE_COLOR
out vec2 vertexTextureCoords;
#else
out vec4 vertexCol;
#endif
#ifdef WITH_TEMPERATURE
out float vertexTemperature;
#endif

// Params
uniform mat4 paramOrthoMatrix;

void main()
{      
    vertexAttributes = inShipPointAttributeGroup2.xyw;

#ifndef WITH_MATTE_COLOR
    vertexTextureCoords = inShipPointAttributeGroup1.zw;
#else
    vertexCol = inShipPointColor;
#endif

#ifdef WITH_TEMPERATURE
    vertexTemperature = inShipPointTemperature;
#endif

    gl_Position = paramOrthoMatrix * vec4(inShipPointAttributeGroup1.xy, inShipPointAttributeGroup2.z, 1.0);
}

###FRAGMENT-120

#define in varying

#ifdef WITH_TEMPERATURE
#include "heat_overlay.glslinc"
#endif

// Inputs from previous shader        
in vec3 vertexAttributes; // Light, Water, Decay
#ifndef  WITH_MATTE_COLOR
in vec2 vertexTextureCoords;
#else
in vec4 vertexCol;
#endif
#ifdef WITH_TEMPERATURE
in float vertexTemperature;
#endif

// Params
uniform float paramEffectiveAmbientLightIntensity;
uniform vec4 paramLampLightColor;
uniform vec4 paramWaterColor;
uniform float paramWaterContrast;
uniform float paramWaterLevelThreshold;
#ifdef WITH_TEMPERATURE
uniform float paramHeatOverlayTransparency;
#endif

#ifndef  WITH_MATTE_COLOR
// Input texture
uniform sampler2D paramSharedTexture;
#endif

void main()
{
#ifndef  WITH_MATTE_COLOR
    vec4 vertexCol = texture2D(paramSharedTexture, vertexTextureCoords);

    // Discard transparent pixels, so that ropes (which are drawn temporally after
    // this shader but Z-ally behind) are not occluded by transparent triangles
    if (vertexCol.w < 0.2)
        discard;
#endif

    // Apply decay
    float originalLightness = dot(vec3(1.0/3.0), vertexCol.xyz);
    vec4 decayColor = mix(vec4(%ROT_GREEN_COLOR%), vec4(%ROT_BROWN_COLOR%), originalLightness);
    vec4 fragColour = mix(decayColor, vertexCol, vertexAttributes.z);

    // Apply point water
#ifdef FOR_LINES
    float vertexWater = max(vertexAttributes.y, 0.0); // Bug on Intel UHD cards: line primitives interpolate water value to below zero
#else
    float vertexWater = vertexAttributes.y;
#endif
    float vertexColorWetness = min(vertexWater, paramWaterLevelThreshold) / paramWaterLevelThreshold * paramWaterContrast;
    fragColour = mix(fragColour, paramWaterColor, vertexColorWetness);

    // Complement missing ambient light with point's light
    float effectiveLightIntensity = mix(vertexAttributes.x, 1.0, paramEffectiveAmbientLightIntensity);

    // Apply light
    fragColour *= effectiveLightIntensity;

#ifdef WITH_TEMPERATURE
    // Apply heat
    fragColour = apply_heat(fragColour, vertexTemperature, paramHeatOverlayTransparency);
#endif

    // Apply point light color
    fragColour = mix(fragColour, paramLampLightColor, vertexAttributes.x);
    
    gl_FragColor = vec4(fragColour.xyz, vertexCol.w);
} 
