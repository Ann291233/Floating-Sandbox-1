###VERTEX-120

#define in attribute
#define out varying

// Inputs
in vec4 inShipPointAttributeGroup1; // Position, TextureCoordinates
in vec4 inShipPointAttributeGroup2; // Light, Water, PlaneId, Decay
in float inShipPointTemperature; // Temperature

// Outputs        
out float vertexLight;
out float vertexWater;
out float vertexDecay;
out vec2 vertexTextureCoords;
out float vertexTemperature;

// Params
uniform mat4 paramOrthoMatrix;

void main()
{            
    vertexLight = inShipPointAttributeGroup2.x;
    vertexWater = inShipPointAttributeGroup2.y;
    vertexDecay = inShipPointAttributeGroup2.w;
    vertexTextureCoords = inShipPointAttributeGroup1.zw;
    vertexTemperature = inShipPointTemperature;

    gl_Position = paramOrthoMatrix * vec4(inShipPointAttributeGroup1.xy, inShipPointAttributeGroup2.z, 1.0);
}

###FRAGMENT-120

#define in varying

#include "heat_overlay.glslinc"

// Inputs from previous shader        
in float vertexLight;
in float vertexWater;
in float vertexDecay;
in vec2 vertexTextureCoords;
in float vertexTemperature;

// Params
uniform float paramEffectiveAmbientLightIntensity;
uniform vec4 paramLampLightColor;
uniform vec4 paramWaterColor;
uniform float paramWaterContrast;
uniform float paramWaterLevelThreshold;
uniform float paramHeatOverlayTransparency;

// Input texture
uniform sampler2D paramSharedTexture;

void main()
{
    vec4 vertexCol = texture2D(paramSharedTexture, vertexTextureCoords);

    // Discard transparent pixels, so that ropes (which are drawn temporally after
    // this shader but Z-ally behind) are not occluded by transparent triangles
    if (vertexCol.w < 0.2)
        discard;

    // Apply decay
    float originalLightness = (vertexCol.x + vertexCol.y + vertexCol.z) / 3.0;
    vec4 decayColor = mix(vec4(%ROT_GREEN_COLOR%), vec4(%ROT_BROWN_COLOR%), originalLightness);
    vertexCol = mix(decayColor, vertexCol, vertexDecay);

    // Apply point water
    float vertexColorWetness = min(vertexWater, paramWaterLevelThreshold) / paramWaterLevelThreshold * paramWaterContrast;
    vec4 fragColour = mix(vertexCol, paramWaterColor, vertexColorWetness);

    // Complement missing ambient light with point's light
    float totalLightIntensity = paramEffectiveAmbientLightIntensity + (1.0 - paramEffectiveAmbientLightIntensity) * vertexLight;

    // Apply light
    fragColour *= totalLightIntensity;

    // Apply heat
    fragColour = apply_heat(fragColour, vertexTemperature, paramHeatOverlayTransparency);

    // Apply point light color
    fragColour = mix(fragColour, paramLampLightColor, vertexLight);
    
    gl_FragColor = vec4(fragColour.xyz, vertexCol.w);
} 
