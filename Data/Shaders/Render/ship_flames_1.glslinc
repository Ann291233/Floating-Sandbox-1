###VERTEX

#version 120
#extension GL_ARB_draw_instanced : enable

#define in attribute
#define out varying

// Inputs
in vec4 inFlame1; // Position, PlaneId, FlamePersonalitySeed
in vec2 inFlame2; // FlameSpacePosition

// Outputs
out vec2 flameSpacePosition;
out float noBorder;
out vec2 noiseOffset;

// Params
uniform mat4 paramOrthoMatrix;
uniform float paramFlameSpeed;

void main()
{
    flameSpacePosition = inFlame2.xy;
    noBorder = float(gl_InstanceIDARB);
    noiseOffset = vec2(inFlame1.w, inFlame1.w - paramFlameSpeed);

    gl_Position = paramOrthoMatrix * vec4(inFlame1.xyz, 1.0);
}

###FRAGMENT

#version 120

#define in varying

// Inputs from previous shader
in vec2 flameSpacePosition; // (x=[-0.5, 0.5], y=[0.0, 1.0])
in float noBorder;
in vec2 noiseOffset;

// The textures
uniform sampler2D paramNoiseTexture1;
uniform sampler2D paramGenericTexturesAtlasTexture;

// Params
uniform float paramFlameWindRotationAngle;
uniform float paramFlameSpeed;

//
// Based on "Flame in the Wind" by kuvkar (https://www.shadertoy.com/view/4tXXRn)
//

mat2 GetRotationMatrix(float angle)
{
    mat2 m;
    m[0][0] = cos(angle); m[0][1] = -sin(angle);
    m[1][0] = sin(angle); m[1][1] = cos(angle);

    return m;
}

// -----------------------------------------------
void main()
{    
    //
    // Apply wind
    //
    
    // Rotation angle is higher the higher we go
    float windAngle = paramFlameWindRotationAngle * flameSpacePosition.y;
    windAngle += (noiseOffset.x - .5) * windAngle * 1.2; // Randomize with personality seed, +/- 60%
            
    // Rotate around bottom
    vec2 uv = GetRotationMatrix(windAngle) * flameSpacePosition - vec2(0.0, 0.5);

    // uv now is in the (x=[-0.5, 0.5], y=[-0.5, 0.5]) range


    //
    // Get noise for this fragment and time
    //

    #define NoiseResolution 0.6
    vec2 noiseUv = uv * NoiseResolution + noiseOffset;
    float fragmentNoise = texture2D(paramNoiseTexture1, noiseUv).r * 0.5 + 0.25; // -> (0.25, 0.75)
    
    
    //
    // Rotate fragment based on noise and vertical extent
    //
    
    float angle = (fragmentNoise - 0.5); // -> (-0.25, 0.25)
        
    // Magnify rotation amount based on distance from center of screen
    angle /= max(0.1, length(uv));
        
    // Straighten the flame at the bottom and make full turbulence higher up
    angle *= smoothstep(-0.8, 0.5, flameSpacePosition.y);    
    
    // Smooth the angle
    angle *= 0.45;
    
    // Rotate and add!
    uv += GetRotationMatrix(angle) * uv;    
        
    // uv now is in the (x=[-1.0, 1.0], y=[-1.0, 1.0]) range
    
    //
    // Calculate thickness
    //

    #define FlameWidth 1.4 // The higher, the narrower
    float thickness = 1.3 - abs(uv.x) * FlameWidth;
    
    // Taper flame depending on randomized height
    //thickness *= 1.0 - smoothstep(fragmentNoise * 0.75, 1.3, flameSpacePosition.y); // Taper up
    thickness *= smoothstep(-0.15, 0.15, flameSpacePosition.y); // Taper down    

    // Discard if we are on the edge, i.e. if:
    // thickness < 0.62996 => focusedThickness < 0.25 (@FlameFocus=3.0)
    if (thickness < 0.62996)
        discard;
    
   
    //
    // Emit
    //
	        
    /* TODOTEST
    // Core1 (white->yellow)
    vec4 col1 = mix(vec4(1.0, 0.764, 0.1, 0.0), vec4(1.0, 1.0, 1.0, 0.0), smoothstep(0.8, 1.5, thickness));

    // Core2 (->red)
    col1 = mix(vec4(1.0, 0.35, 0.0, 0.0), col1, smoothstep(0.72, 1.6, thickness));

    // Border (->dark red)
    col1 = mix(vec4(0.3, 0.0, 0.0, 0.0), col1, smoothstep(0.585, 0.843, thickness) + noBorder);
    
    // Blend with background
    // When no border: transparent < 0.7  --- opaque > 1.2
    // When border:    transparent < 0.0 --- opaque > 0.5
    float alpha = smoothstep(0.0 + noBorder * 0.7, 0.5 + noBorder * 0.7, thickness);
    
    // Make final color
    vec3 constantList = vec3(1.0f, 0.0f, alpha);
    gl_FragColor = col1.xyzw * constantList.xxxy + constantList.yyyz;
    */

    // Sample flame texture
    // TODOHERE
    vec2 virtualTextureCoords = (uv + vec2(1.0, 1.0)) / 2.0; // [0.0, 1.0] [0.0, 1.0]
    virtualTextureCoords.x = (virtualTextureCoords.x + noiseOffset.x) / 2.0;
    //virtualTextureCoords.y = fract((flameSpacePosition.y - paramFlameSpeed) / 2.0 + noiseOffset.x);

    vec2 textureFrameBottomLeft = vec2(0.750122070313, 0.875244140625);
    vec2 textureFrameTopRight = vec2(0.874877929688, 0.937255859375);
    vec2 textureCoords = 
        textureFrameBottomLeft
        + (textureFrameTopRight - textureFrameBottomLeft) * ( virtualTextureCoords);
    vec4 col1 = texture2D(paramGenericTexturesAtlasTexture, textureCoords);

    // Blend with background
    // When no border: transparent < 0.7  --- opaque > 1.2
    // When border:    transparent < 0.0 --- opaque > 0.5
    float alpha = smoothstep(0.0 + noBorder * 0.7, 0.5 + noBorder * 0.7, thickness);

    alpha = col1.w * alpha;
    if (alpha < 0.75)
        discard;

    // Make final color
    gl_FragColor = vec4(col1.xyz, alpha);
}