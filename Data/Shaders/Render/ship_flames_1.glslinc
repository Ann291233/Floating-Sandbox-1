###VERTEX

#version 120

#define in attribute
#define out varying

// Inputs
in vec4 inFlame1; // Position, PlaneId, FlamePersonalitySeed
in vec2 inFlame2; // FlameSpacePosition

// Outputs
out vec2 flameSpacePosition;
out vec2 noiseOffset;

// Params
uniform mat4 paramOrthoMatrix;
uniform float paramFlameSpeed;

void main()
{
    flameSpacePosition = inFlame2.xy;
    noiseOffset = vec2(inFlame1.w, inFlame1.w - paramFlameSpeed);

    gl_Position = paramOrthoMatrix * vec4(inFlame1.xyz, 1.0);
}

###FRAGMENT

#version 120

#define in varying

// Inputs from previous shader
in vec2 flameSpacePosition; // (x=[-1.0, 1.0], y=[0.0, 1.0])
in vec2 noiseOffset;

// The textures
uniform sampler2D paramNoiseTexture1;
uniform sampler2D paramGenericLinearTexturesAtlasTexture;

// Params
uniform vec2 paramAtlasTile1Dx; // span across two pixels
uniform vec2 paramAtlasTile1LeftBottomTextureCoordinates;
uniform vec2 paramAtlasTile1Size;
uniform float paramFlameWindRotationAngle;
uniform float paramFlameSpeed;

//
// Loosely based on "Flame in the Wind" by kuvkar (https://www.shadertoy.com/view/4tXXRn)
//

mat2 GetRotationMatrix(float angle)
{
    mat2 m;
    m[0][0] = cos(angle); m[0][1] = -sin(angle);
    m[1][0] = sin(angle); m[1][1] = cos(angle);

    return m;
}

// -----------------------------------------------
void main()
{    
    //
    // Apply wind
    //
    
    // Rotation angle is higher the higher we go
    float windAngle = paramFlameWindRotationAngle * flameSpacePosition.y;
    windAngle += (noiseOffset.x - .5) * windAngle * 1.2; // Randomize with personality seed, +/- 60%
            
    // Rotate around bottom
    vec2 uv = GetRotationMatrix(windAngle) * flameSpacePosition - vec2(0.0, 0.5);

    // uv now is in the (x=[-1.0, 1.0], y=[-0.5, 0.5]) range


    //
    // Get noise for this fragment and time
    //

    #define NoiseResolution 0.6
    vec2 noiseUv = uv * NoiseResolution + noiseOffset;
    float fragmentNoise = texture2D(paramNoiseTexture1, noiseUv).r * 0.5 + 0.25; // -> (0.25, 0.75)
    
    
    //
    // Rotate fragment based on noise and vertical extent
    //
    
    float angle = (fragmentNoise - 0.5); // -> (-0.25, 0.25)
        
    // Magnify rotation amount based on distance from center of screen
    angle /= max(0.1, length(uv));
        
    // Straighten the flame at the bottom and make full turbulence higher up
    angle *= smoothstep(-1.0, 0.3, flameSpacePosition.y);    
    
    // Smooth the angle
    angle *= 0.45;
    
    // Rotate and add!
    uv += GetRotationMatrix(angle) * uv;    
        
    // uv now is in the (x=[-2.0, 2.0], y=[-1.0, 1.0]) range (really?)
    
    //
    // Calculate thickness
    //

    #define FlameWidth 1.4 // The higher, the narrower
    float thickness = 1.3 - abs(uv.x) * FlameWidth;
    
    // Taper flame down depending on randomized height
    thickness *= smoothstep(-0.15, 0.15, flameSpacePosition.y); // Taper down    

    // Calculate implicit alpha
    float implicitAlpha = smoothstep(0.7, 1.2, thickness);

    if (implicitAlpha < 0.75) // For perf
        discard;   
   
    //
    // Emit
    //

    vec2 virtualTextureCoords = (uv + vec2(1.0, 1.0)) / 2.0;

    // Sample flame texture alpha        
    virtualTextureCoords.x = 
        (virtualTextureCoords.x + noiseOffset.x) / 2.0; // For alpha sampling we halve x

    vec2 alphaSampleCoords = paramAtlasTile1LeftBottomTextureCoordinates + paramAtlasTile1Size * virtualTextureCoords;
    vec4 sampledAlpha = texture2D(paramGenericLinearTexturesAtlasTexture, alphaSampleCoords);

    // Sample flame texture color - sample coords change with time      
    virtualTextureCoords.y = fract(
        (uv.y - paramFlameSpeed * 4.0) / 2.0 // For color sampling we halve y and wrap
        + noiseOffset.x); // Randomize Y displacement per-flame
    virtualTextureCoords.y = clamp(virtualTextureCoords.y, paramAtlasTile1Dx.y, 1.0 - paramAtlasTile1Dx.y); // Clamp to fight against linear filtering - though no idea why dx works and dx/2.0 does not work
    vec2 colorSampleCoords = paramAtlasTile1LeftBottomTextureCoordinates + paramAtlasTile1Size * virtualTextureCoords;
    vec4 sampledColor = texture2D(paramGenericLinearTexturesAtlasTexture, colorSampleCoords);

    // Calculate final alpha
    float finalAlpha = sampledAlpha.w * implicitAlpha;
    
    if (finalAlpha < 0.75) // For Z test
        discard;

    // Make final color
    gl_FragColor = vec4(sampledColor.xyz, finalAlpha);


    /*
    //
    // Test for tile wrapping
    //

    vec2 srCoords = (flameSpacePosition + vec2(1.0, 0.0)) * vec2(0.5, 1.0); // [0.0, 1.0] [0.0, 1.0]
    srCoords.y = fract(srCoords.y - paramFlameSpeed); // Wrap
    srCoords.y = clamp(srCoords.y, paramAtlasTile1Dx.y, 1.0 - paramAtlasTile1Dx.y); // Clamp to fight against linear filtering - though no idea why dx works and dx/2.0 does not work
    vec2 sampleCoords = paramAtlasTile1LeftBottomTextureCoordinates + paramAtlasTile1Size * srCoords;
    vec4 testCol = texture2D(paramGenericLinearTexturesAtlasTexture, sampleCoords);
    gl_FragColor = vec4(testCol.xyz, 1.0);
    */
}