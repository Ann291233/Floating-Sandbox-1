###VERTEX

#version 120

#define in attribute
#define out varying

// Inputs
in vec4 inShipPointAttributeGroup1; // Position, TextureCoordinates
in vec4 inShipPointAttributeGroup2; // Light, Water, PlaneId, Decay

// Outputs        
out vec3 vertexAttributes; // Light, Water, Decay
out vec2 vertexTextureCoords;

// Params
uniform mat4 paramOrthoMatrix;

void main()
{  
    vertexAttributes = inShipPointAttributeGroup2.xyw;
    vertexTextureCoords = inShipPointAttributeGroup1.zw;

    gl_Position = paramOrthoMatrix * vec4(inShipPointAttributeGroup1.xy, inShipPointAttributeGroup2.z, 1.0);
}

###FRAGMENT

#version 120

#define in varying

// Inputs from previous shader        
in vec3 vertexAttributes; // Light, Water, Decay
in vec2 vertexTextureCoords;

// Params
uniform float paramEffectiveAmbientLightIntensity;
uniform vec4 paramLampLightColor;
uniform vec4 paramWaterColor;
uniform float paramWaterContrast;
uniform float paramWaterLevelThreshold;

// Input texture
uniform sampler2D paramSharedTexture;

void main()
{
    vec4 vertexCol = texture2D(paramSharedTexture, vertexTextureCoords);

    // Discard transparent pixels, so that ropes (which are drawn temporally after
    // this shader but Z-ally behind) are not occluded by transparent triangles
    if (vertexCol.w < 0.2)
        discard;

    // Apply decay
    float originalLightness = dot(vec3(1.0/3.0), vertexCol.xyz);
    vec4 decayColor = mix(vec4(%ROT_GREEN_COLOR%), vec4(%ROT_BROWN_COLOR%), originalLightness);
    vec4 fragColour = mix(decayColor, vertexCol, vertexAttributes.z);

    // Apply point water
    float vertexColorWetness = min(vertexAttributes.y, paramWaterLevelThreshold) / paramWaterLevelThreshold * paramWaterContrast;
    fragColour = mix(fragColour, paramWaterColor, vertexColorWetness);

    // Complement missing ambient light with point's light
    float totalLightIntensity = mix(vertexAttributes.x, 1.0, paramEffectiveAmbientLightIntensity);

    // Apply light
    fragColour *= totalLightIntensity;

    // Apply point light color
    fragColour = mix(fragColour, paramLampLightColor, vertexAttributes.x);
    
    gl_FragColor = vec4(fragColour.xyz, vertexCol.w);
} 
