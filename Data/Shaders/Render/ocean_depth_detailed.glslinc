###VERTEX-120

#define in attribute
#define out varying

// Inputs
in vec2 inOceanDetailed1;	// Position (vec2)
in vec4 inOceanDetailed2;	// yTexture (float, UNUSED), yBack/yMid/yFront (float, world y)

// Parameters
uniform mat4 paramOrthoMatrix;

// Outputs
out float yWorld;
out vec4 yVectorNdc;

void main()
{
    gl_Position = paramOrthoMatrix * vec4(inOceanDetailed1, -1.0, 1.0);

    yWorld = inOceanDetailed1.y;

    // Pass y values to fragment shader, converting to NDC
    yVectorNdc = vec4(
        gl_Position.y,
        inOceanDetailed2.yzw * paramOrthoMatrix[1].y + vec3(paramOrthoMatrix[3].y));
}


###FRAGMENT-120

#define in varying

#include "ocean_surface.glslinc"

// Inputs from previous shader
in float yWorld;
in vec4 yVectorNdc;

// Parameters
uniform float paramEffectiveAmbientLightIntensity;
uniform float paramOceanTransparency;
uniform vec3 paramOceanDepthColorStart;
uniform vec3 paramOceanDepthColorEnd;
uniform float paramOceanDarkeningRate;

void main()
{
    // Get depth color sample
    float darkMix = 1.0 - exp(min(0.0, yWorld) * paramOceanDarkeningRate); // Darkening is based on world Y (more negative Y, more dark)
    vec3 depthColor = mix(
        paramOceanDepthColorStart,
        paramOceanDepthColorEnd,
        darkMix * darkMix * darkMix);

    // Apply detail
    vec4 color = CalculateOceanPlaneColor(
        vec4(depthColor, (1.0 - paramOceanTransparency)),
        yVectorNdc.x,
        yVectorNdc.y, yVectorNdc.z, yVectorNdc.w);

    // Combine
    gl_FragColor = vec4(color.xyz * paramEffectiveAmbientLightIntensity, color.w);
}
