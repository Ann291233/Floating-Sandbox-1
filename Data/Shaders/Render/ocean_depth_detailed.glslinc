###VERTEX-120

#define in attribute
#define out varying

// Inputs
in vec2 inOceanDetailed1;	// Position (vec2)
in vec4 inOceanDetailed2;	// yTexture (float, UNUSED), yBack/dYBack2/yMid (float, world y)
in vec3 inOceanDetailed3;	// dYMid2/yFront/dYFront2 (float, world y)

// Parameters
uniform mat4 paramOrthoMatrix;

// Outputs
out vec4 yVectorWorld1; // yWorld, yBackWorld/dYBack2World/yMidWorld
out vec3 yVectorWorld2; // dYMid2World/yFrontWorld/dYFront2World

void main()
{
    gl_Position = paramOrthoMatrix * vec4(inOceanDetailed1, -1.0, 1.0);

    yVectorWorld1 = vec4(inOceanDetailed1.y, inOceanDetailed2.yzw);
    yVectorWorld2 = inOceanDetailed3;
}


###FRAGMENT-120

#define in varying

#include "ocean_surface.glslinc"

// Inputs from previous shader
in vec4 yVectorWorld1; // yWorld, yBackWorld/dYBack2World/yMidWorld
in vec3 yVectorWorld2; // dYMid2World/yFrontWorld/dYFront2World

// Parameters
uniform float paramEffectiveAmbientLightIntensity;
uniform float paramOceanTransparency;
uniform vec3 paramOceanDepthColorStart;
uniform vec3 paramOceanDepthColorEnd;
uniform float paramOceanDarkeningRate;

void main()
{
    // Get depth color sample
    float darkMix = 1.0 - exp(min(0.0, yVectorWorld1.x) * paramOceanDarkeningRate); // Darkening is based on world Y (more negative Y, more dark)
    vec3 depthColor = mix(
        paramOceanDepthColorStart,
        paramOceanDepthColorEnd,
        darkMix * darkMix * darkMix);

    // Apply detail
    vec4 color = CalculateOceanPlaneColor(
        vec4(depthColor, (1.0 - paramOceanTransparency)),
        yVectorWorld1.x,
        yVectorWorld1.y, yVectorWorld1.z,
        yVectorWorld1.w, yVectorWorld2.x, 
        yVectorWorld2.y, yVectorWorld2.z);

    // Combine
    gl_FragColor = vec4(color.xyz * paramEffectiveAmbientLightIntensity, color.w);
}
