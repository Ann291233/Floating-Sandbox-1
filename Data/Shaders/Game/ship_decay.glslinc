###VERTEX-120

#define in attribute
#define out varying

// Inputs
in vec4 inShipPointAttributeGroup1; // Position, TextureCoordinates
in vec4 inShipPointAttributeGroup2; // Light, Water, PlaneId, Decay

// Outputs        
out float vertexDecay;
out vec2 vertexTextureCoords;

// Params
uniform mat4 paramOrthoMatrix;

void main()
{            
    vertexDecay = inShipPointAttributeGroup2.w;
    vertexTextureCoords = inShipPointAttributeGroup1.zw;

    gl_Position = paramOrthoMatrix * vec4(inShipPointAttributeGroup1.xy, inShipPointAttributeGroup2.z, 1.0);
}

###FRAGMENT-120

#define in varying

// Inputs from previous shader        
in float vertexDecay;
in vec2 vertexTextureCoords;

// Params
uniform float paramEffectiveAmbientLightIntensity;

// Input texture
uniform sampler2D paramSharedTexture;

void main()
{
    float vertexAlpha = texture2D(paramSharedTexture, vertexTextureCoords).w;

    // Discard transparent pixels, so that ropes (which are drawn temporally after
    // this shader but Z-ally behind) are not occluded by transparent triangles
    if (vertexAlpha < 0.2)
        discard;

    // Make color based off decay
    vec3 color = vec3(vertexDecay * paramEffectiveAmbientLightIntensity);
    gl_FragColor = vec4(color, vertexAlpha);
} 
