vec3 ApplyDepthDarkening(
    vec3 startColor,
    vec3 endColor,
    float yWorld,
    float darkeningRate)
{
    float darkMix = 1.0 - exp(min(0.0, yWorld) * darkeningRate); // Darkening is based on world Y (more negative Y, more dark)
    return mix(
        startColor,
        endColor,
        darkMix * darkMix * darkMix);
}

vec3 ApplyAmbientLight(
    vec3 baseColor,
    vec3 moonlightColor,
    float effectiveAmbientLightIntensity)
{
    return 
        baseColor 
        * mix(
            moonlightColor * 0.5, 
            vec3(1.), 
            effectiveAmbientLightIntensity);
}

vec3 ApplyNoise(
    vec3 baseColor,
    vec2 worldCoords,
    sampler2D noiseTexture)
{
    vec2 noiseCoords = worldCoords /4096.0;
    float noiseSample = texture2D(noiseTexture, noiseCoords).x;
    #define NOISE_AMPL 0.65
    float m = (1.0 - NOISE_AMPL) + noiseSample * NOISE_AMPL;
    return baseColor * m;
}
