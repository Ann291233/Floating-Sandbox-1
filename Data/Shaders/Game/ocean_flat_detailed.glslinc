###VERTEX-120

#define in attribute
#define out varying

// Inputs
in vec2 inOceanDetailed1;	// Position (vec2)
in vec4 inOceanDetailed2;	// yBack/yMid/yFront/dYFront2 (float, world y)

// Parameters
uniform mat4 paramOrthoMatrix;

// Outputs
out vec3 oceanColor;
out vec2 posNdc;
out float yOffsetNdc;
out float yWorld;
out vec4 yVectorWorld; // yBackWorld/yMidWorld/yFrontWorld/dYFront2World

void main()
{
    // Calculate position
    gl_Position = paramOrthoMatrix * vec4(inOceanDetailed1, -1.0, 1.0);

    // Pass values to fragment shader
    posNdc = gl_Position.xy;
    yOffsetNdc = (paramOrthoMatrix * vec4(0.0, 0.0, -1.0, 1.0)).y; // TODOHERE: really needed? Can't incorporate in posNdc already?
    yWorld = inOceanDetailed1.y;
    yVectorWorld = inOceanDetailed2;
}


###FRAGMENT-120

#define in varying

#include "ocean_surface.glslinc"

// Inputs from previous shader
in vec2 posNdc;
in float yOffsetNdc;
in float yWorld;
in vec4 yVectorWorld; // yBackWorld/yMidWorld/yFrontWorld/dYFront2World

// Input textures
uniform sampler1D paramSharedTexture;

// Parameters
uniform float paramEffectiveAmbientLightIntensity;
uniform float paramOceanTransparency;
uniform vec3 paramOceanFlatColor;
uniform float paramSunRaysInclination; // 0.0==vertical, 1.0/-1.0==45/-45 degrees

void main()
{
    // Apply shadows
    vec4 baseColor = ApplyShadows(
        vec4(paramOceanFlatColor, (1.0 - paramOceanTransparency)),
        posNdc - vec2(0.0, yOffsetNdc),
        paramSunRaysInclination,
        paramSharedTexture);

    // Apply detail
    vec4 color = CalculateDetailedOceanPlaneColor(
        baseColor,
        yWorld,
        yVectorWorld);

    gl_FragColor = vec4(color.xyz * paramEffectiveAmbientLightIntensity, color.w);
}
