###VERTEX-120

#define in attribute
#define out varying

// Inputs
in vec2 inOceanDetailed1;	// Position (vec2)
in vec4 inOceanDetailed2;	// yBack/yMid/yFront/dYFront2 (float, world y)

// Parameters
uniform float paramOceanTransparency;
uniform vec3 paramOceanFlatColor;
uniform mat4 paramOrthoMatrix;

// Outputs
out vec4 oceanColor;
out float yWorld;
out vec4 yVectorWorld; // yBackWorld/yMidWorld/yFrontWorld/dYFront2World

void main()
{
    // Calculate color
    oceanColor = vec4(paramOceanFlatColor.xyz, 1.0 - paramOceanTransparency);

    // Calculate position
    gl_Position = paramOrthoMatrix * vec4(inOceanDetailed1, -1.0, 1.0);

    // Pass y values to fragment shader
    yWorld = inOceanDetailed1.y;
    yVectorWorld = inOceanDetailed2;
}


###FRAGMENT-120

#define in varying

#include "ocean_surface.glslinc"

// Inputs from previous shader
in vec4 oceanColor;
in float yWorld;
in vec4 yVectorWorld; // yBackWorld/yMidWorld/yFrontWorld/dYFront2World

// Parameters
uniform float paramEffectiveAmbientLightIntensity;

void main()
{
    vec4 color = CalculateOceanPlaneColor(
        oceanColor, 
        yWorld,
        yVectorWorld);

    gl_FragColor = vec4(color.xyz * paramEffectiveAmbientLightIntensity, color.w);
}
