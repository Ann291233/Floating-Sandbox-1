###VERTEX-120

#define in attribute
#define out varying

//
// Clouds' inputs are directly in NDC coordinates
//

// Inputs
in vec4 inCloud1; // Position (NDC) (vec2), TextureCoordinates (vec2)
in vec4 inCloud2; // VirtualTextureCoordinates (vec2), Darkening, VolumetricGrowthProgress
in float inCloud3; // TextureWidthAdjust (widest dimension)

// Outputs
out vec2 textureCoords;
out vec2 virtualTextureCoords;
out float darkness;
out float volumetricGrowthProgress;
out float textureWidthAdjust;

void main()
{
    textureCoords = inCloud1.zw;
    virtualTextureCoords = inCloud2.xy;
    darkness = inCloud2.z;
    volumetricGrowthProgress = inCloud2.w;
    textureWidthAdjust = inCloud3;

    gl_Position = vec4(inCloud1.xy, -1.0, 1.0);
}

###FRAGMENT-120

#define in varying

#include "common.glslinc"
#include "lamp_tool.glslinc"

// Inputs from previous shader
in vec2 textureCoords;
in vec2 virtualTextureCoords; // [-1, +1]
in float darkness;
in float volumetricGrowthProgress;
in float textureWidthAdjust;

// The texture
uniform sampler2D paramCloudsAtlasTexture;
#ifdef DETAILED_CLOUDS
uniform sampler2D paramNoiseTexture;
#endif

// Parameters        
uniform float paramEffectiveAmbientLightIntensity;
uniform vec3 paramEffectiveMoonlightColor;

void main()
{
    // Calculate lamp tool intensity
    float lampToolIntensity = CalculateLampToolIntensity(gl_FragCoord.xy);

#ifdef DETAILED_CLOUDS

    // Virtual texture coords -> Polar coords
    // (r, a) (r=[0.0, 1.0], a=[0.0, 2PI CCW from W])        
    vec2 ra = vec2(
        length(virtualTextureCoords), 
        atan(virtualTextureCoords.y, virtualTextureCoords.x));

    // Evolve with time, and use as noise sample coords
    #define SPEED 0.01
    #define DENSITY 6.0
    vec2 noiseCoords = vec2(ra.x / DENSITY - volumetricGrowthProgress * SPEED, ra.y / (2. * PI));
    float n = texture2D(paramNoiseTexture, noiseCoords).x; // [0.0, 1.0]    
    
    // Scale noise: [-amplitude/2, +amplitude/2]
    //
    // Amplitude is zero at borders
    #define BASE_AMPLITUDE 0.13 // Good for a texture of width 1.0
    float amplitude = 
        (BASE_AMPLITUDE * textureWidthAdjust)
        * (1.0 - smoothstep(0.85, 1.0, max(abs(virtualTextureCoords.x), abs(virtualTextureCoords.y))));
    n = (n - 0.5) * amplitude;
    
    // Zero at center
    n = n * smoothstep(0.2, 0.3, ra.x);
    
    // Sample cloud texture using noise as offset
    vec4 cloudColor = texture2D(paramCloudsAtlasTexture, textureCoords + vec2(n));

#else

    // Sample texture
    vec4 cloudColor = texture2D(paramCloudsAtlasTexture, textureCoords);

#endif

    // Adjust for ambient light and mooncolor and (storm) darkness
    gl_FragColor = vec4(
        ApplyAmbientLight(
            cloudColor.rgb,
            paramEffectiveMoonlightColor,
            paramEffectiveAmbientLightIntensity,
            lampToolIntensity) * darkness,
        cloudColor.a);
} 
