#include "static_parameters.glslinc"

#define PI 3.1415926

vec2 linearstep(vec2 lEdge, vec2 rEdge, vec2 x)
{
    return clamp((x-lEdge)/(rEdge - lEdge), 0.0, 1.0);
}

float rand(vec2 uv)
{ 
    // From https://www.shadertoy.com/view/Xt23Ry
    return fract(sin(dot(uv.xy ,vec2(12.9898,78.233))) * 43758.5453); 
}

float IsInBox(float lEdge, float rEdge, float x)
{
    return step(lEdge, x) * step(x, rEdge);
}

vec3 ApplyDither(
    vec3 color,
    vec2 fragCoords,
    sampler2D noiseTexture)
{
    #define DITHER_MAGNITUDE 1.5

    vec2 noiseCoords = fragCoords / vec2(NOISE_2_WIDTH, NOISE_2_HEIGHT);
    float noise = texture2D(noiseTexture, noiseCoords).x;
    color += mix(-DITHER_MAGNITUDE/255.0, DITHER_MAGNITUDE/255.0, noise);
    return color;
}

vec3 ApplyAmbientLight(
    vec3 baseColor,
    vec3 moonlightColor,
    float effectiveAmbientLightIntensity,
    float lampToolIntensity)
{
    return 
        baseColor 
        * mix(
            moonlightColor, 
            vec3(1.), 
            max(effectiveAmbientLightIntensity, lampToolIntensity));
}

float CalculateOceanDepthDarkeningFactor(
    float yWorld,
    float darkeningRate)
{
    float darkMix = 1.0 - exp(min(0.0, yWorld) * darkeningRate); // Darkening is based on world Y (more negative Y, more dark)
    return darkMix * darkMix * darkMix;
}

