#include "static_parameters.glslinc"

vec4 CalculateDetailedOceanPlaneColor(
    vec4 baseColor,    
    float yWorld,
    vec4 yVector, // Back, Mid, Front, d2Front
    vec3 moonlightColor,
    float effectiveAmbientLightIntensity)
{
    //
    // Calculate border width
    //
    // We use the second derivative to offset the border width vertically
    //
    
    float dWorld = abs(dFdy(yWorld)); // World per pixel
    float basalBorderWidth = 1.5 * dWorld; // pixels

#ifdef RENDER_ALL_PLANES
    float borderWidthHalfBack = basalBorderWidth + abs(dFdx(yVector.x)) * 1.2;
    float borderWidthHalfMid = basalBorderWidth + abs(dFdx(yVector.y)) * 1.2;
#endif

    float borderWidthHalfFront = basalBorderWidth + abs(dFdx(yVector.z)) * 1.2;
    float yFrontMidBorder = yVector.z + borderWidthHalfFront * yVector.w / (dWorld * 70.);

    //
    // Color
    //

    // 1.0 when yWorld is below middle of the border, 0.0 otherwise

#ifdef RENDER_ALL_PLANES
    float baseColorBack = step(yWorld, yVector.x);
    float baseColorMid = step(yWorld, yVector.y);
#endif

    float baseColorFront = step(yWorld, yFrontMidBorder);

#ifdef RENDER_ALL_PLANES
    float baseColorAlpha =
        max(
            baseColorFront,
            max(
                .6 * baseColorMid,
                .5 * baseColorBack));
#else
    float baseColorAlpha = baseColorFront;
#endif

    //return vec4(baseColor, baseColorAlpha);

    //
    // Border
    //

#ifdef RENDER_ALL_PLANES
    float borderBack =
        1. - smoothstep(0., borderWidthHalfBack, abs(yWorld - yVector.x));

    float borderMid =
        1. - smoothstep(0., borderWidthHalfMid, abs(yWorld - yVector.y));
#endif

    float borderFront =
        1. - smoothstep(0., borderWidthHalfFront, abs(yWorld - yFrontMidBorder));

#ifdef RENDER_ALL_PLANES
    // epsilon when front is visible, 1 otherwise
    #define FrontObscuredAlpha 0.4
    float borderFrontOpaqueness = (1. - baseColorFront) * (1. - FrontObscuredAlpha) + FrontObscuredAlpha;

    // epsilon when mid is visible, 1 otherwise
    #define MidObscuredAlpha 0.4
    float borderMidOpaqueness = (1. - baseColorMid) * (1. - MidObscuredAlpha) + MidObscuredAlpha;
#endif

#ifdef RENDER_ALL_PLANES
    float borderAlpha =
        max(
            borderFront,
            max(
                .8 * borderMid * borderFrontOpaqueness,
                .7 * borderBack * borderFrontOpaqueness * borderMidOpaqueness));
#else
    float borderAlpha = borderFront;
#endif

    //return vec4(1., 1., 1., borderAlpha);

    //    
    // Combine border and color
    //

    vec3 borderColor = mix(
        moonlightColor * 0.5, 
        vec3(1.), 
        effectiveAmbientLightIntensity);

    vec4 finalColor = mix(
        vec4(baseColor.xyz, baseColorAlpha * baseColor.w),
        vec4(borderColor, 1.),
        borderAlpha);

    return finalColor;
}

vec3 ApplyDepthDarkening(
    vec3 startColor,
    vec3 endColor,
    float yWorld,
    float darkeningRate)
{
    float darkMix = 1.0 - exp(min(0.0, yWorld) * darkeningRate); // Darkening is based on world Y (more negative Y, more dark)
    return mix(
        startColor,
        endColor,
        darkMix * darkMix * darkMix);
}

vec3 ApplyDepthDarkeningWithDither(
    vec3 startColor,
    vec3 endColor,
    float yWorld,
    float darkeningRate,
    vec2 fragCoords,
    sampler2D noiseTexture)
{
    vec3 c = ApplyDepthDarkening(
        startColor,
        endColor,
        yWorld,
        darkeningRate);

    //
    // Dither
    //

    vec2 noiseCoords = fragCoords / vec2(NOISE_2_WIDTH, NOISE_2_HEIGHT);
    float noise = texture2D(noiseTexture, noiseCoords).x;
    c.xyz += mix(-0.5/255.0, 0.5/255.0, noise);
    return c;
}

float GetShadowFactor(
    vec2 shadowPosNdc, // [-1.0, 1.0]
    float yWorld,
    float sunRaysInclination, // 0.0==vertical, 1.0/-1.0==45/-45 degrees
    sampler1D shadowsBuffer,
    sampler2D noiseTexture)
{
    // Maintain with code!
    #define CloudSpaceWidthNdc (3.0 * 2.0)

    // Sample shadow buffer
    float sampleX = (shadowPosNdc.x + CloudSpaceWidthNdc / 2.0) / CloudSpaceWidthNdc + sunRaysInclination * shadowPosNdc.y * .05;
    float shadowSample = texture1D(shadowsBuffer, sampleX).x; // [0.0 ... 2.0]

    // Darken portion > 1.0 with depth, but less so for brigther areas;
    // add some noise to the depth to create flanges
    vec2 depthNoiseCoords = vec2(sampleX * 5.0 + shadowSample * 0.2, 0);
    float depthNoiseSample = texture2D(noiseTexture, depthNoiseCoords).x;
    float depth = min(0.0, yWorld + 5.0) + depthNoiseSample * 5.0 * smoothstep(10.0, 30.0, -yWorld); 
    float depthBoost = (2.0 - shadowSample);
    #define DEPTH_SPEED 0.1
    shadowSample = 1.0 + (shadowSample - 1.0) * exp(depth * depthBoost * DEPTH_SPEED);

    return shadowSample;
}

vec3 ApplyAmbientLight(
    vec3 baseColor,
    vec3 moonlightColor,
    float effectiveAmbientLightIntensity)
{
    return 
        baseColor 
        * mix(
            moonlightColor * 0.5, 
            vec3(1.), 
            effectiveAmbientLightIntensity);
}