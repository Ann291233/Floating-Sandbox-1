###VERTEX-120

#define in attribute
#define out varying

// Inputs
in vec3 inOceanDetailed1;	// Position (vec2), yTexture (float)
in vec4 inOceanDetailed2;	// yBack/yMid/yFront/dYFront2 (float, world y)

// Parameters
uniform mat4 paramOrthoMatrix;

// Outputs
out vec2 shadowPosNdc;
out vec3 worldCoordsAndYTexture;
out vec4 yVectorWorld; // yBackWorld/yMidWorld/yFrontWorld/dYFront2World

void main()
{
    // Calculate position
    vec4 posNdc = paramOrthoMatrix * vec4(inOceanDetailed1.xy, -1.0, 1.0);
    gl_Position = posNdc;

    // Pass values to fragment shader
    shadowPosNdc = vec2(posNdc.x, posNdc.y - paramOrthoMatrix[1][2]);
    worldCoordsAndYTexture = inOceanDetailed1;
    yVectorWorld = inOceanDetailed2;
}


###FRAGMENT-120

#define in varying

#include "ocean_surface.glslinc"

// Inputs from previous shader
in vec2 shadowPosNdc;
in vec3 worldCoordsAndYTexture;
in vec4 yVectorWorld; // yBackWorld/yMidWorld/yFrontWorld/dYFront2World

// Input textures
uniform sampler2D paramOceanTexture;
uniform sampler1D paramSharedTexture;

// Parameters
uniform float paramEffectiveAmbientLightIntensity;
uniform float paramOceanTransparency;
uniform float paramOceanDarkeningRate;
uniform float paramSunRaysInclination; // 0.0==vertical, 1.0/-1.0==45/-45 degrees
uniform vec2 paramTextureScaling;

void main()
{
    // Get texture color sample
    vec2 textureCoord2 = vec2(worldCoordsAndYTexture.x, worldCoordsAndYTexture.z);
    float darkMix = 1.0 - exp(min(0.0, worldCoordsAndYTexture.y) * paramOceanDarkeningRate); // Darkening is based on world Y (more negative Y, more dark)
    vec3 textureColor = mix(
        texture2D(paramOceanTexture, textureCoord2 * paramTextureScaling).xyz,
        vec3(0.),
        darkMix * darkMix * darkMix);

    // Apply shadows
    vec4 baseColor = ApplyShadows(
        vec4(textureColor, (1.0 - paramOceanTransparency)),
        shadowPosNdc,
        paramSunRaysInclination,
        paramSharedTexture);

    // Apply detail
    vec4 color = CalculateDetailedOceanPlaneColor(
        baseColor,
        worldCoordsAndYTexture.y,
        yVectorWorld);

    // Combine
    gl_FragColor = vec4(color.xyz * paramEffectiveAmbientLightIntensity, color.w);
}
