###VERTEX-120

#define in attribute
#define out varying

#ifdef IS_UPPER

// Inputs
in vec3 inOceanDetailed1Upper;	// Position (vec2), yTexture (float)
in vec4 inOceanDetailed2Upper;	// yBack/yMid/yFront/dYFront2 (float, world y)

// Parameters
uniform mat4 paramOrthoMatrix;

// Outputs
out vec2 shadowPosNdc;
out vec3 worldCoordsAndYTexture;
out vec4 yVectorWorld; // yBackWorld/yMidWorld/yFrontWorld/dYFront2World

void main()
{
    // Calculate position
    vec4 posNdc = paramOrthoMatrix * vec4(inOceanDetailed1Upper.xy, -1.0, 1.0);
    gl_Position = posNdc;

    // Pass values to fragment shader
    shadowPosNdc = vec2(posNdc.x, posNdc.y - paramOrthoMatrix[3][1]);
    worldCoordsAndYTexture = inOceanDetailed1Upper;
    yVectorWorld = inOceanDetailed2Upper;
}

#else

// Inputs
in vec3 inOceanDetailed1Lower;	// Position (vec2), yTexture (float)

// Parameters
uniform mat4 paramOrthoMatrix;

// Outputs
out vec2 shadowPosNdc;
out vec3 worldCoordsAndYTexture;

void main()
{
    // Calculate position
    vec4 posNdc = paramOrthoMatrix * vec4(inOceanDetailed1Lower.xy, -1.0, 1.0);
    gl_Position = posNdc;

    // Pass values to fragment shader
    shadowPosNdc = vec2(posNdc.x, posNdc.y - paramOrthoMatrix[3][1]);
    worldCoordsAndYTexture = inOceanDetailed1Lower;
}

#endif

###FRAGMENT-120

#define in varying

#include "common.glslinc"
#include "lamp_tool.glslinc"
#include "ocean.glslinc"

// Inputs from previous shader
in vec2 shadowPosNdc;
in vec3 worldCoordsAndYTexture;
#ifdef IS_UPPER
in vec4 yVectorWorld; // yBackWorld/yMidWorld/yFrontWorld/dYFront2World
#endif

// Input textures
uniform sampler2D paramNoiseTexture;
uniform sampler2D paramOceanTexture;
uniform sampler1D paramSharedTexture;

// Parameters
uniform float paramEffectiveAmbientLightIntensity;
uniform vec3 paramEffectiveMoonlightColor;
uniform float paramOceanDepthDarkeningRate;
uniform float paramOceanTransparency;
uniform float paramSunRaysInclination; // 0.0==vertical, 1.0/-1.0==45/-45 degrees
uniform vec2 paramTextureScaling;

void main()
{
    // Get texture color sample
    vec2 textureCoord2 = vec2(worldCoordsAndYTexture.x, worldCoordsAndYTexture.z);
    vec4 textureColor = texture2D(paramOceanTexture, textureCoord2 * paramTextureScaling);

    // Apply shadows
    float shadowFactor = GetShadowFactor(
        shadowPosNdc,
        worldCoordsAndYTexture.y,
        paramSunRaysInclination,
        paramSharedTexture,
        paramNoiseTexture);    
    textureColor = vec4(textureColor.xyz * shadowFactor, textureColor.w * (1.0 - paramOceanTransparency));

    // Calculate lamp tool intensity
    float lampToolIntensity = CalculateLampToolIntensity(gl_FragCoord.xy);

    // Apply ambient light
    textureColor.xyz = ApplyAmbientLight(
        textureColor.xyz, 
        paramEffectiveMoonlightColor * 0.5, 
        paramEffectiveAmbientLightIntensity,
        lampToolIntensity);

    // Calculate depth darkening
    float darkeningFactor = CalculateOceanDepthDarkeningFactor(
        worldCoordsAndYTexture.y,
        paramOceanDepthDarkeningRate);

    // Apply depth darkening
    textureColor.xyz = mix(
        textureColor.xyz,
        vec3(0.0),
        darkeningFactor * (1.0 - lampToolIntensity));

#ifdef IS_UPPER
    // Apply detail
    gl_FragColor = CalculateDetailedOceanPlaneColorUpper(
        vec4(textureColor.xyz, textureColor.w * (1.0 - paramOceanTransparency)),
        worldCoordsAndYTexture.y,
        yVectorWorld, 
        paramEffectiveMoonlightColor, 
        paramEffectiveAmbientLightIntensity);
#else
    // Apply detail
    gl_FragColor = vec4(textureColor.xyz, textureColor.w * (1.0 - paramOceanTransparency));
#endif
}
