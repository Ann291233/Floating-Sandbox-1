###VERTEX-120

#define in attribute
#define out varying

// Inputs
in vec4 inShipPointAttributeGroup1; // Position, TextureCoordinates
in vec3 inShipPointAttributeGroup2; // Light, Water, PlaneId
in float inShipPointAuxiliaryData;  // Tension

// Outputs        
out float vertexTension;
out vec2 vertexTextureCoords;

// Params
uniform mat4 paramOrthoMatrix;

void main()
{            
    vertexTension = inShipPointAuxiliaryData;
    vertexTextureCoords = inShipPointAttributeGroup1.zw;

    gl_Position = paramOrthoMatrix * vec4(inShipPointAttributeGroup1.xy, inShipPointAttributeGroup2.z, 1.0);
}

###FRAGMENT-120

#define in varying

// Inputs from previous shader        
in float vertexTension;
in vec2 vertexTextureCoords;

// Params
uniform float paramEffectiveAmbientLightIntensity;

// Input texture
uniform sampler2D paramSharedTexture;

void main()
{
    vec4 textureCol = texture2D(paramSharedTexture, vertexTextureCoords);

    // Discard transparent pixels, so that ropes (which are drawn temporally after
    // this shader but Z-ally behind) are not occluded by transparent triangles
    if (textureCol.w < 0.2)
        discard;

    // Calculate tension color

    vec4 tensionColorMap[5] = vec4[5](
        vec4(0.0, 0.0, 166.0/255.0, 0.0),           // 0.00 -> 0.25
        vec4(0.0, 166.0/255.0, 0.0, 1.0),           // 0.25 -> 0.50
        vec4(166.0/255.0, 166.0/255.0, 0.0, 1.0),   // 0.50 -> 0.75
        vec4(166.0/255.0, 0.0, 0.0, 1.0),           // 0.75 -> 1.00
        vec4(166.0/255.0, 0.0, 0.0, 1.0));          // 1.00 -> +INF

    float effectiveVertexTension = 1.0 - (1.0 - vertexTension) * (1.0 - vertexTension);

    int bracketIndex = int(effectiveVertexTension / 0.25);

    vec4 tensionCol = mix(
        tensionColorMap[bracketIndex],
        tensionColorMap[bracketIndex + 1],
        (effectiveVertexTension - float(bracketIndex) * 0.25)  / 0.25);

    // Render

    vec4 finalColor = mix(
        textureCol,
        tensionCol,
        tensionCol.w);

    gl_FragColor = vec4(finalColor.xyz * paramEffectiveAmbientLightIntensity, finalColor.w);
} 
