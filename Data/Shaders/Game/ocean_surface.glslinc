vec4 CalculateDetailedOceanPlaneColor(
    vec4 baseColor,    
    float yWorld,
    vec4 yVector) // Back, Mid, Front, d2Front    
{
    //
    // Calculate border width
    //
    // We use the second derivative to offset the border width vertically
    //
    
    float dWorld = abs(dFdy(yWorld)); // World per pixel
    float basalBorderWidth = 1.5 * dWorld; // pixels

#ifdef RENDER_ALL_PLANES
    float borderWidthHalfBack = basalBorderWidth + abs(dFdx(yVector.x)) * 1.2;
    float borderWidthHalfMid = basalBorderWidth + abs(dFdx(yVector.y)) * 1.2;
#endif

    float borderWidthHalfFront = basalBorderWidth + abs(dFdx(yVector.z)) * 1.2;
    float yFrontMidBorder = yVector.z + borderWidthHalfFront * yVector.w / (dWorld * 70.);

    //
    // Color
    //

    // 1.0 when yWorld is below middle of the border, 0.0 otherwise

#ifdef RENDER_ALL_PLANES
    float baseColorBack = step(yWorld, yVector.x);
    float baseColorMid = step(yWorld, yVector.y);
#endif

    float baseColorFront = step(yWorld, yFrontMidBorder);

#ifdef RENDER_ALL_PLANES
    float baseColorAlpha =
        max(
            baseColorFront,
            max(
                .6 * baseColorMid,
                .5 * baseColorBack));
#else
    float baseColorAlpha = baseColorFront;
#endif

    //return vec4(baseColor, baseColorAlpha);

    //
    // Border
    //

#ifdef RENDER_ALL_PLANES
    float borderBack =
        1. - smoothstep(0., borderWidthHalfBack, abs(yWorld - yVector.x));

    float borderMid =
        1. - smoothstep(0., borderWidthHalfMid, abs(yWorld - yVector.y));
#endif

    float borderFront =
        1. - smoothstep(0., borderWidthHalfFront, abs(yWorld - yFrontMidBorder));

#ifdef RENDER_ALL_PLANES
    // epsilon when front is visible, 1 otherwise
    #define FrontObscuredAlpha 0.4
    float borderFrontOpaqueness = (1. - baseColorFront) * (1. - FrontObscuredAlpha) + FrontObscuredAlpha;

    // epsilon when mid is visible, 1 otherwise
    #define MidObscuredAlpha 0.4
    float borderMidOpaqueness = (1. - baseColorMid) * (1. - MidObscuredAlpha) + MidObscuredAlpha;
#endif

#ifdef RENDER_ALL_PLANES
    float borderAlpha =
        max(
            borderFront,
            max(
                .8 * borderMid * borderFrontOpaqueness,
                .7 * borderBack * borderFrontOpaqueness * borderMidOpaqueness));
#else
    float borderAlpha = borderFront;
#endif

    //return vec4(1., 1., 1., borderAlpha);

    //    
    // Combine border and color
    //

    vec4 finalColor = mix(
        vec4(baseColor.xyz, baseColorAlpha * baseColor.w),
        vec4(1.), // Border color
        borderAlpha);

    return finalColor;
}

vec4 ApplyShadows(
    vec4 baseColor,
    vec2 shadowPosNdc, // [-1.0, 1.0]
    float yWorld,
    float sunRaysInclination, // 0.0==vertical, 1.0/-1.0==45/-45 degrees
    sampler1D shadowsBuffer)
{
    // Maintain with code!
    #define CloudSpaceWidthNdc (3.0 * 2.0)

    float sampleX = (shadowPosNdc.x + CloudSpaceWidthNdc / 2.0) / CloudSpaceWidthNdc + sunRaysInclination * shadowPosNdc.y * .05;
    float shadowSample = texture1D(shadowsBuffer, sampleX).x; // [1.0 ... 2.0]

    // Darken > 1.0f with depth, but less so for brigther areas
    // Darkening is based on world Y (more negative Y, more dark)
    shadowSample = 1.0 + (shadowSample - 1.0) * exp(min(0.0, yWorld) * (2.0 - shadowSample) * 0.05);
    
    //TODO: try without sqrt
    //shadowSample *= exp(min(0.0, yWorld) * sqrt(shadowSample) * 0.05); // Darkening is based on world Y (more negative Y, more dark)
    //shadowSample *= exp(min(0.0, yWorld) * sqrt(shadowSample - 1.0) * 0.08); // Darkening is based on world Y (more negative Y, more dark)
    //shadowSample *= exp(min(0.0, yWorld) * step(1.0, shadowSample) * (shadowSample - 1.0) * 0.05); // Darkening is based on world Y (more negative Y, more dark)

    // Map 0.0->1.0 to 0.5->1.0
    //shadowSample = 0.5 + shadowSample / 2.0;

    // Mapping shadow: [1.0, 2.0]
    // TODO

    // Apply shadow
    vec3 innerColor = baseColor.xyz * shadowSample;

    return vec4(
        innerColor,
        baseColor.w);
}