###VERTEX-120

#define in attribute
#define out varying

// Inputs
in vec4 inFlame1; // Position (vec2), PlaneId, PersonalitySeed
in vec3 inFlame2; // WindRotationAngle, FlameSpacePosition

// Outputs
out float windRotationAngle;
out vec2 flameSpacePosition;
out float personalitySeed;

// Params
uniform mat4 paramOrthoMatrix;
uniform float paramFlameProgress;

void main()
{
    windRotationAngle = inFlame2.x;
    flameSpacePosition = inFlame2.yz;
    personalitySeed = inFlame1.w;

    gl_Position = paramOrthoMatrix * vec4(inFlame1.xyz, 1.0);
}

###FRAGMENT-120

#define in varying

#include "common.glslinc"

// Inputs from previous shader
in float windRotationAngle; // [-0.5, +0.5]
in vec2 flameSpacePosition; // (x=[-1.0, 1.0], y=[0.0, 1.0])
in float personalitySeed; // [0.0, 1.0]

// The textures
uniform sampler2D paramNoiseTexture;
uniform sampler2D paramGenericLinearTexturesAtlasTexture;

// Params
uniform vec2 paramAtlasTile1LeftBottomTextureCoordinates; // Inclusive of dead-center
uniform vec2 paramAtlasTile1Size; // Inclusive of dead-center
uniform float paramFlameProgress;
uniform float paramKaosAdjustment;

//
// Loosely based on "Flame in the Wind" by kuvkar (https://www.shadertoy.com/view/4tXXRn)
//

mat2 GetRotationMatrix(float angle)
{
    mat2 m;
    m[0][0] = cos(angle); m[0][1] = -sin(angle);
    m[1][0] = sin(angle); m[1][1] = cos(angle);

    return m;
}

// -----------------------------------------------
void main()
{   
    // Fragments with alpha lower than this are discarded
    #define MIN_ALPHA 0.2

    //
    // Apply wind
    //
    
    // Rotation angle is higher the higher we go
    float windAngle = windRotationAngle * flameSpacePosition.y;
    windAngle += (personalitySeed - .5) * windAngle * 0.6; // Randomize with personality seed
            
    // Rotate around bottom
    vec2 uv = GetRotationMatrix(windAngle) * flameSpacePosition;
    
    // uv now is in the (x=[-1.0, 1.0], y=[0.0, 1.0]) range


    //
    // Rotate fragment based on noise and vertical extent
    //

    #define NOISE_RESOLUTION 0.5
    #define NOISE_SPEED 3.3
        
    vec2 noiseUv = uv * NOISE_RESOLUTION - vec2(0., paramFlameProgress * NOISE_SPEED);
    float noiseAngle = texture2D(paramNoiseTexture, noiseUv).r * 0.5 - 0.25; // -> (-0.25, 0.25)
          
    // Smooth (control kaos), pulsating
    #define MIN_KAOS_SONTROL 0.20  // at least this
    #define MAX_KAOS_CONTROL 0.65 // at most this
    float s = 1.0 - smoothstep(0.9, 1.0, sin(paramFlameProgress * 1.5 * 4. - flameSpacePosition.y));
    float kaosControl = (MIN_KAOS_SONTROL + (MAX_KAOS_CONTROL - MIN_KAOS_SONTROL) * s) * paramKaosAdjustment;
    noiseAngle *= kaosControl;
    
    // Rotate - and add!
    #define ROT_OFFSET 0.09  // The higher, the more kaos at bottom
    uv += GetRotationMatrix(noiseAngle) * (uv + vec2(0., ROT_OFFSET)) - vec2(0., ROT_OFFSET);    
        
    // uv now is in the (x=[-2.0, 2.0], y=[0.0, 2.0]) range (really?)
    
    
    
    //
    // Calculate thickness (alpha)
    //

    #define FLAME_WIDTH 0.19
    #define BOTTOM_RADIUS 0.19
    float flameWidth = 
        step(flameSpacePosition.y, BOTTOM_RADIUS)
        * sqrt(abs(BOTTOM_RADIUS * BOTTOM_RADIUS - (flameSpacePosition.y - BOTTOM_RADIUS) * (flameSpacePosition.y - BOTTOM_RADIUS))) * FLAME_WIDTH / BOTTOM_RADIUS
        +
        step(BOTTOM_RADIUS, flameSpacePosition.y)
        * FLAME_WIDTH;

    /* FOLLOWING IS FOR TEAR-SHAPED FLAMES
    #define BEGIN_FLAME_WIDTH 0.41
    #define L1 0.19
    #define L2 0.23
    #define L3 0.70
    #define END_FLAME_WIDTH 0.27
    float flameWidth = 
        step(flameSpacePosition.y, L1)
            * sqrt(abs(L1 * L1 - (flameSpacePosition.y - L1) * (flameSpacePosition.y - L1))) * BEGIN_FLAME_WIDTH / L1;
    flameWidth = max(flameWidth,
        IsInBox(L1, L2, flameSpacePosition.y) 
            * BEGIN_FLAME_WIDTH);
    flameWidth = max(flameWidth,
        IsInBox(L2, L3, flameSpacePosition.y) 
            * (END_FLAME_WIDTH + (BEGIN_FLAME_WIDTH - END_FLAME_WIDTH) * (1.0 - smoothstep(L2, L3, flameSpacePosition.y))));
    flameWidth = max(flameWidth,            
        IsInBox(L3, 1.1, flameSpacePosition.y) 
            * END_FLAME_WIDTH);
    */
    
    float thickness = 1.0 - abs(uv.x) / flameWidth; // [-inf, 0.0 @ width, 1.0 @ center x]

    // Calculate thickness alpha - should be 1.0 when thickness > 0, but we do anti-aliasing
    float thicknessAlpha = smoothstep(0.0, 0.6, thickness);    

    // Note: removed as it's not nice to branch out
    //if (thicknessAlpha < MIN_ALPHA) // For perf
    //    discard;
    
    // Calculate factor to taper sampling at bottom
    float bottomSampleTapering = 
        0.3 
        + 0.7 * flameWidth / FLAME_WIDTH;
    
    //
    // Sample alpha
    //

    #define ALPHA_MAP_RESOLUTION 1.25

    // [0.0, 1.0]
    vec2 alphaMapVirtualTextureCoords = vec2(
        fract(
            uv.x / ALPHA_MAP_RESOLUTION / bottomSampleTapering
            + personalitySeed),
        flameSpacePosition.y);
    vec2 alphaMapTextureCoords = paramAtlasTile1LeftBottomTextureCoordinates + paramAtlasTile1Size * alphaMapVirtualTextureCoords;    
    float sampledAlpha = texture2D(paramGenericLinearTexturesAtlasTexture, alphaMapTextureCoords).a;
    
    
    //
	// Sample color
    //
    // Color map: continuous along y    
    //

    #define COLOR_MAP_RESOLUTION 3.
    #define COLOR_MAP_SPEED 1.5

    // [0.0, 1.0]
    vec2 colorMapVirtualTextureCoords = fract(
        vec2(
            abs(uv.x) / COLOR_MAP_RESOLUTION / bottomSampleTapering + personalitySeed,
            flameSpacePosition.y / COLOR_MAP_RESOLUTION 
                - paramFlameProgress * COLOR_MAP_SPEED 
                + personalitySeed)); // Adding some per-flame random Y displacement
    vec2 colorMapTextureCoords = paramAtlasTile1LeftBottomTextureCoordinates + paramAtlasTile1Size * colorMapVirtualTextureCoords;
    vec4 sampledColor = texture2D(paramGenericLinearTexturesAtlasTexture, colorMapTextureCoords);

    //
    // Emit
    //

    // Calculate final alpha
    float finalAlpha = sampledAlpha * thicknessAlpha;
    
    if (finalAlpha < MIN_ALPHA) // For Z test
        discard;
        
    // Make final color
    gl_FragColor = vec4(sampledColor.rgb, finalAlpha);
}