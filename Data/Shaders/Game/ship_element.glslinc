###VERTEX-120

#define in attribute
#define out varying

// Inputs
in vec4 inShipPointAttributeGroup1; // Position, TextureCoordinates
in vec4 inShipPointAttributeGroup2; // Light, Water, PlaneId, Decay
#if HEAT_RENDER_MODE != 0
in float inShipPointTemperature; // Temperature
#endif
#if STRESS_RENDER_MODE != 0
in float inShipPointStress; // Stress
#endif
#ifdef WITH_MATTE_COLOR
in vec4 inShipPointColor;
#endif

// Outputs        
out vec3 vertexAttributes; // Light, Water, Decay
#ifndef WITH_MATTE_COLOR
out vec2 vertexTextureCoords;
#else
out vec4 vertexCol;
#endif
#if HEAT_RENDER_MODE != 0
out float vertexTemperature;
#endif
#if STRESS_RENDER_MODE != 0
out float vertexStress;
#endif

// Params
uniform mat4 paramOrthoMatrix;

void main()
{      
    vertexAttributes = inShipPointAttributeGroup2.xyw;

#ifndef WITH_MATTE_COLOR
    vertexTextureCoords = inShipPointAttributeGroup1.zw;
#else
    vertexCol = inShipPointColor;
#endif

#if HEAT_RENDER_MODE != 0
    vertexTemperature = inShipPointTemperature;
#endif

#if STRESS_RENDER_MODE != 0
    vertexStress = inShipPointStress;
#endif

    gl_Position = paramOrthoMatrix * vec4(inShipPointAttributeGroup1.xy, inShipPointAttributeGroup2.z, 1.0);
}

###FRAGMENT-120

#define in varying

#if HEAT_RENDER_MODE != 0
#include "ship_heat.glslinc"
#endif

// Inputs from previous shader        
in vec3 vertexAttributes; // Light, Water, Decay
#ifndef  WITH_MATTE_COLOR
in vec2 vertexTextureCoords;
#else
in vec4 vertexCol;
#endif
#if HEAT_RENDER_MODE != 0
in float vertexTemperature;
#endif
#if STRESS_RENDER_MODE != 0
in float vertexStress;
#endif

// Params
#if HEAT_RENDER_MODE != 1
uniform float paramEffectiveAmbientLightIntensity;
uniform vec3 paramWaterColor;
uniform float paramWaterContrast;
uniform float paramWaterLevelThreshold;
#endif
uniform vec3 paramLampLightColor;
#if HEAT_RENDER_MODE != 0
uniform float paramHeatShift;
#endif

#ifndef  WITH_MATTE_COLOR
// Input texture
uniform sampler2D paramSharedTexture;
#endif

void main()
{
#ifndef  WITH_MATTE_COLOR
    vec4 vertexCol = texture2D(paramSharedTexture, vertexTextureCoords);

    // Discard transparent pixels, so that ropes (which are drawn temporally after
    // this shader but Z-ally behind) are not occluded by transparent triangles
    if (vertexCol.w < 0.2)
        discard;
#endif


#if HEAT_RENDER_MODE != 1
    // Apply decay
    float originalLightness = dot(vec3(1.0/3.0), vertexCol.xyz);
    vec3 decayColor = mix(vec3(%ROT_GREEN_COLOR%), vec3(%ROT_BROWN_COLOR%), originalLightness);
    vec3 fragColour = mix(decayColor, vertexCol.xyz, vertexAttributes.z);

    // Apply point water
#ifdef FOR_LINES
    float vertexWater = max(vertexAttributes.y, 0.0); // Bug on Intel UHD cards: line primitives interpolate water value to below zero
#else
    float vertexWater = vertexAttributes.y;
#endif
    float vertexColorWetness = min(vertexWater, paramWaterLevelThreshold) / paramWaterLevelThreshold * paramWaterContrast;
    fragColour = mix(fragColour, paramWaterColor, vertexColorWetness);

    // Complement missing ambient light with point's light
    float effectiveLightIntensity = mix(vertexAttributes.x, 1.0, paramEffectiveAmbientLightIntensity);

    // Apply light
    fragColour *= effectiveLightIntensity;
#endif


    //
    // Heat
    //

#if HEAT_RENDER_MODE == 0
    // None
#elif HEAT_RENDER_MODE == 1
    // Heat Overlay

    // Get heat color
    vec3 heatColor = get_heat_color(vertexTemperature, paramHeatShift);

    // Overwrite fragment color with heat color
    vec3 fragColour = heatColor;
#elif HEAT_RENDER_MODE == 2

    // Incandescence

    // Get heat color
    vec3 heatColor = get_heat_color(vertexTemperature, paramHeatShift);

    // Screen-blend fragment color with heat color
    vec3 one = vec3(1.0);
    fragColour = one - (one - fragColour) * (one - heatColor);
#else
#error Unrecognized value for HEAT_RENDER_MODE
#endif

    
    // Apply lamp color
    fragColour = mix(fragColour, paramLampLightColor, vertexAttributes.x);

    // Make final color, using original vertex's alpha
    gl_FragColor = vec4(fragColour, vertexCol.w);


    //
    // Stress
    //

#if STRESS_RENDER_MODE == 0
    // No stress
#elif STRESS_RENDER_MODE == 1
    // Stress Overlay

    vec4 stressColorMap[6] = vec4[6](
        vec4(0.0, 0.0, 166.0/255.0, 0.0),           // 0.00 -> 0.20
        vec4(0.0, 0.0, 166.0/255.0, 1.0),           // 0.20 -> 0.40
        vec4(0.0, 166.0/255.0, 0.0, 1.0),           // 0.40 -> 0.60
        vec4(166.0/255.0, 166.0/255.0, 0.0, 1.0),   // 0.60 -> 0.80
        vec4(166.0/255.0, 0.0, 0.0, 1.0),           // 0.80 -> 1.00
        vec4(166.0/255.0, 0.0, 0.0, 1.0));          // 1.00 -> +INF

    float effectiveVertexStress = 1.0 - (1.0 - vertexStress) * (1.0 - vertexStress);

    int bracketIndex = int(effectiveVertexStress / 0.20);

    vec4 stressCol = mix(
        stressColorMap[bracketIndex],
        stressColorMap[bracketIndex + 1],
        (effectiveVertexStress - float(bracketIndex) * 0.20)  / 0.20);

    // Render

    gl_FragColor = mix(
        gl_FragColor,
        stressCol,
        stressCol.w);
#else
#error Unrecognized value for STRESS_RENDER_MODE
#endif        
} 
