###VERTEX-120

#define in attribute
#define out varying

// Inputs
in vec4 inShipPointAttributeGroup1; // Position, TextureCoordinates
in vec4 inShipPointAttributeGroup2; // Light, Water, PlaneId, Decay
#if HEAT_RENDER_MODE != 0
in float inShipPointTemperature; // Temperature
#endif
#if STRESS_RENDER_MODE != 0
in float inShipPointStress; // Stress
#endif
#ifdef WITH_MATTE_COLOR
in vec4 inShipPointColor;
#endif

// Outputs
out float vertexWorldY;
out vec3 vertexAttributes; // Light, Water, Decay
#ifndef WITH_MATTE_COLOR
out vec2 vertexTextureCoords;
#else
out vec4 vertexCol;
#endif
#if HEAT_RENDER_MODE != 0
out float vertexTemperature;
#endif
#if STRESS_RENDER_MODE != 0
out float vertexStress;
#endif

// Params
uniform mat4 paramOrthoMatrix;

void main()
{      
    vertexWorldY = inShipPointAttributeGroup1.y;

    vertexAttributes = inShipPointAttributeGroup2.xyw;

#ifndef WITH_MATTE_COLOR
    vertexTextureCoords = inShipPointAttributeGroup1.zw;
#else
    vertexCol = inShipPointColor;
#endif

#if HEAT_RENDER_MODE != 0
    vertexTemperature = inShipPointTemperature;
#endif

#if STRESS_RENDER_MODE != 0
    vertexStress = inShipPointStress;
#endif

    gl_Position = paramOrthoMatrix * vec4(inShipPointAttributeGroup1.xy, inShipPointAttributeGroup2.z, 1.0);
}

###FRAGMENT-120

#define in varying

#include "common.glslinc"
#include "lamp_tool.glslinc"
#include "static_parameters.glslinc"

#if HEAT_RENDER_MODE != 0
#include "ship_heat.glslinc"
#endif

// Inputs from previous shader
in float vertexWorldY;
in vec3 vertexAttributes; // Light, Water, Decay
#ifndef  WITH_MATTE_COLOR
in vec2 vertexTextureCoords;
#else
in vec4 vertexCol;
#endif
#if HEAT_RENDER_MODE != 0
in float vertexTemperature;
#endif
#if STRESS_RENDER_MODE != 0
in float vertexStress;
#endif

// Params
#if HEAT_RENDER_MODE != 1
uniform float paramEffectiveAmbientLightIntensity;
uniform vec3 paramEffectiveMoonlightColor;
uniform float paramOceanDepthDarkeningRate;
uniform float paramShipDepthDarkeningSensitivity;
uniform vec3 paramWaterColor;
uniform float paramWaterContrast;
uniform float paramWaterLevelThreshold;
#endif
uniform vec3 paramLampLightColor;
#if HEAT_RENDER_MODE != 0
uniform float paramHeatShift;
#endif
#if STRESS_RENDER_MODE != 0
uniform vec4 paramStressColorMap[12];
#endif
#ifdef FOR_POINTS
uniform float paramShipParticleRenderMode;
#endif

#ifndef WITH_MATTE_COLOR
// Input texture
uniform sampler2D paramSharedTexture;
#endif

void main()
{
#ifndef  WITH_MATTE_COLOR
    vec4 vertexCol = texture2D(paramSharedTexture, vertexTextureCoords);

    // Discard transparent pixels, so that ropes (which are drawn temporally after
    // this shader but Z-ally behind) are not occluded by transparent triangles
    if (vertexCol.w < 0.2)
        discard;
#endif


#if HEAT_RENDER_MODE != 1
    // Apply decay
    float originalLightness = dot(vec3(1.0/3.0), vertexCol.xyz);
    vec3 decayColor = mix(vec3(ROT_GREEN_COLOR), vec3(ROT_BROWN_COLOR), originalLightness);
    vec3 fragColour = mix(decayColor, vertexCol.xyz, vertexAttributes.z);

    // Apply point water
#ifdef FOR_LINES
    float vertexWater = max(vertexAttributes.y, 0.0); // Bug on Intel UHD cards: line primitives interpolate water value to below zero
#else
    float vertexWater = vertexAttributes.y;
#endif
    float vertexColorWetness = min(vertexWater, paramWaterLevelThreshold) / paramWaterLevelThreshold * paramWaterContrast;
    fragColour = mix(fragColour, paramWaterColor, vertexColorWetness);

    // Complement missing ambient light with point's light
    float effectiveAmbientLightIntensity = mix(vertexAttributes.x, 1.0, paramEffectiveAmbientLightIntensity);

    // Calculate lamp tool intensity
    float lampToolIntensity = CalculateLampToolIntensity(gl_FragCoord.xy);

    if (paramShipDepthDarkeningSensitivity > 0.0) // Fine to branch - all pixels will follow the same branching
    {
        // Calculate depth darkening
        float darkeningFactor = CalculateOceanDepthDarkeningFactor(
            vertexWorldY,
            paramOceanDepthDarkeningRate);

        // Apply depth darkening - which is removed by lamp tool and electric lamp
        fragColour = mix(
            fragColour,
            vec3(0.),
            darkeningFactor * (1.0 - lampToolIntensity) * (1.0 - vertexAttributes.x) * paramShipDepthDarkeningSensitivity);
    }

    // Apply ambient light, with moonlight becoming darker (cheaply) with depth
    fragColour = ApplyAmbientLight(
        fragColour,
        paramEffectiveMoonlightColor * 0.7 * clamp(1.0 + vertexWorldY / SHIP_MOONLIGHT_MAX_DEPTH, 0.0, 1.0),
        effectiveAmbientLightIntensity,
        lampToolIntensity);
#endif


    //
    // Heat
    //

#if HEAT_RENDER_MODE == 0
    // None
#elif HEAT_RENDER_MODE == 1
    // Heat Overlay

    // Get heat color
    vec3 heatColor = get_heat_color(vertexTemperature, paramHeatShift);

    // Overwrite fragment color with heat color
    vec3 fragColour = heatColor;
#elif HEAT_RENDER_MODE == 2

    // Incandescence

    // Get heat color
    vec3 heatColor = get_heat_color(vertexTemperature, paramHeatShift);

    // Screen-blend fragment color with heat color
    vec3 one = vec3(1.0);
    fragColour = one - (one - fragColour) * (one - heatColor);
#else
#error Unrecognized value for HEAT_RENDER_MODE
#endif
    
    // Apply electric lamp color
    fragColour = mix(fragColour, paramLampLightColor, vertexAttributes.x);

    // Make final color, using original vertex's alpha
    gl_FragColor = vec4(fragColour, vertexCol.w);

    //
    // Stress
    //

#if STRESS_RENDER_MODE == 0
    // No stress
#elif STRESS_RENDER_MODE == 1
    // Stress Overlay

    // Color map is of size 12; each entry is for the following stress brackets:
    //  0: [-1.20 -> -1.00)
    //  1: [-1.00 -> -0.80)
    //  2: [-0.80 -> -0.60)
    //  3: [-0.60 -> -0.40)
    //  4: [-0.40 -> -0.20)
    //  5: [-0.20 ->  0.00)
    //  6: [ 0.00 ->  0.20)
    //  7: [ 0.20 ->  0.40)
    //  8: [ 0.40 ->  0.60)
    //  9: [ 0.60 ->  0.80)
    // 10: [ 0.80 ->  1.00)
    // 11: [ 1.00 ->  1.20)

    // Transform [-1.0, 1.0] into [0.2, 2.2], flattening curve at peaks
    float effectiveVertexStress = 
        1.2
        + step(0.0, vertexStress) * (1.0 - (1.0 - vertexStress) * (1.0 - vertexStress))
        + step(0.0, -vertexStress) * (-1.0 + (1.0 + vertexStress) * (1.0 + vertexStress));

    int bracketIndex = int(effectiveVertexStress / 0.20);

    vec4 stressCol = mix(
        paramStressColorMap[bracketIndex],
        paramStressColorMap[bracketIndex + 1],
        (effectiveVertexStress - float(bracketIndex) * 0.20) / 0.20);

    // Render - keeping current alpha
    gl_FragColor.xyz = mix(
        gl_FragColor.xyz,
        stressCol.xyz,
        stressCol.w);
#else
#error Unrecognized value for STRESS_RENDER_MODE
#endif

#ifdef FOR_POINTS
    if (paramShipParticleRenderMode != 0.0)
    {
        // Make it a round particle
        float d = length(gl_PointCoord - vec2(0.5)) * 2.0;
        gl_FragColor.a *= 1.0 - smoothstep(0.92, 1.0, d);
        if (gl_FragColor.a < 0.2) // Don't mess with depth
            discard;
    }
#endif
} 
