###VERTEX-120

#define in attribute
#define out varying

// Inputs
in vec2 inOceanDetailed1;	// Position (vec2)
in vec4 inOceanDetailed2;	// yBack/yMid/yFront/dYFront2 (float, world y)

// Parameters
uniform mat4 paramOrthoMatrix;

// Outputs
out vec2 shadowPosNdc;
out vec2 stCoords;
out float yWorld;
out vec4 yVectorWorld; // yBackWorld/yMidWorld/yFrontWorld/dYFront2World

void main()
{    
    // Calculate position
    vec4 posNdc = paramOrthoMatrix * vec4(inOceanDetailed1.xy, -1.0, 1.0);
    gl_Position = posNdc;

    // Pass values to fragment shader
    shadowPosNdc = vec2(posNdc.x, posNdc.y - paramOrthoMatrix[3][1]);
    stCoords = gl_Position.xy;
    yWorld = inOceanDetailed1.y;
    yVectorWorld = inOceanDetailed2;
}


###FRAGMENT-120

#define in varying

#include "ocean_surface.glslinc"

// Inputs from previous shader
in vec2 shadowPosNdc;
in vec2 stCoords;
in float yWorld;
in vec4 yVectorWorld; // yBackWorld/yMidWorld/yFrontWorld/dYFront2World

// Input textures
uniform sampler2D paramNoiseTexture;
uniform sampler1D paramSharedTexture;

// Parameters
uniform float paramEffectiveAmbientLightIntensity;
uniform float paramOceanTransparency;
uniform vec3 paramOceanDepthColorStart;
uniform vec3 paramOceanDepthColorEnd;
uniform float paramOceanDarkeningRate;
uniform float paramSunRaysInclination; // 0.0==vertical, 1.0/-1.0==45/-45 degrees

void main()
{
    vec3 depthColor = ApplyDepthDarkening(
        paramOceanDepthColorStart,
        paramOceanDepthColorEnd,
        yWorld,
        paramOceanDarkeningRate,
        stCoords,
        paramNoiseTexture);

    // Apply shadows
    vec4 baseColor = ApplyShadows(
        vec4(depthColor, (1.0 - paramOceanTransparency)),
        shadowPosNdc,
        yWorld,
        paramSunRaysInclination,
        paramSharedTexture);

    // Apply detail
    vec4 color = CalculateDetailedOceanPlaneColor(
        baseColor,
        yWorld,
        yVectorWorld);

    // Combine
    gl_FragColor = vec4(color.xyz * paramEffectiveAmbientLightIntensity, color.w);
}
